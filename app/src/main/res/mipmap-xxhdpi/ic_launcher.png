package krolkozak.project.app.tworzenietrasy;

import android.content.Context;
import android.location.Address;
import android.location.Geocoder;
import android.os.Build;
import android.util.Log;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.osmdroid.bonuspack.routing.MapQuestRoadManager;
import org.osmdroid.bonuspack.routing.Road;
import org.osmdroid.bonuspack.routing.RoadManager;
import org.osmdroid.util.BoundingBox;
import org.osmdroid.util.GeoPoint;
import org.osmdroid.views.CustomZoomButtonsController;
import org.osmdroid.views.MapView;
import org.osmdroid.views.overlay.Marker;
import org.osmdroid.views.overlay.Overlay;
import org.osmdroid.views.overlay.Polyline;

import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import krolkozak.project.app.InterfejsAPI;
import krolkozak.project.app.R;
import krolkozak.project.app.Ustawienia;
import krolkozak.project.app.bazadanych.Historia;
import krolkozak.project.app.pomocnicze.WyswietlanieMapy;

@RequiresApi(api = Build.VERSION_CODES.O)
public class Trasa {
    // rozmiar ramki wokół kadru widoku
    private final int ROZMIAR_RAMKI = 200;
    // widok mapy
    public MapView mapa;
    // koordynaty geograficzne
    public double szerGeog1, dlugGeog1;
    public double szerGeog2, dlugGeog2;
    public ArrayList<PunkPostoju> przystanki = new ArrayList<>();
    //środek transportu
    public String srodek_transportu;
    private String transport_doURL = "";
    // lista punktów geograficznych
    public ArrayList<GeoPoint> punkty = new ArrayList<>();
    // pomocnicza nazwa aplikacji do debuggowania
    private final String nazwaApki = "TRAVEL_APP";
    public OffsetDateTime czasWyjazdu = OffsetDateTime.now();
    //warunki pogodowe na trasie
    private Pogoda pogoda = new Pogoda();
    private JSONArray miejscaPogodowe = new JSONArray();
    private String lokalizacja_poczatkowa = "";
    private String lokalizacja_koncowa = "";

    // metoda czyszcząca mapę (punkty i trasa)
    public void wyczyscMape() {
        // usunięcie punktów z listy
        punkty = new ArrayList<>();
        List<Overlay> mapOverlays = mapa.getOverlays();

        // usunięcie wszystkich rzeczy z mapy
        for (int i = mapOverlays.size() - 1; i >= 0; i--) {
            mapOverlays.remove(mapOverlays.get(i));
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    // metoda, która ustawia początkowe parametry mapy oraz wyświetla na ekranie
    public void zainicjujMape() {
        // -------------- WYSWIETLANIE MAPY --------------
        // ustawienie przycisków przybliżania i oddalania widoku mapy na stale widoczne
        mapa.getZoomController().setVisibility(CustomZoomButtonsController.Visibility.ALWAYS);
        // włączenie obsługi wielokrotnego dotyku (mutli-touch)
        mapa.setMultiTouchControls(true);
        // -------------- CZYSZCZENIE MAPY --------------
        // wywołanie metody czyszcząca mapę (punkty i trasa)
        wyczyscMape();

        // Punkty wokół których zostanie wykadrowana mapa na start aplikacji
        punkty.add(new GeoPoint(40.730610, -73.935242)); // NOWY JORK
        punkty.add(new GeoPoint(41.015137, 28.979530)); // STAMBUŁ

        // -------------- DOSTOSOWANIE PRZYBLIZENIA --------------
        // ustawienie minimalnego i maksymalnego możliwego przybliżenia
        // minimalne i maksymalne przybliżenie mapy
        double MIN_PRZYBLIZENIE = 3;
        mapa.setMinZoomLevel(MIN_PRZYBLIZENIE);
        double MAX_PRZYBLIZENIE = 20;
        mapa.setMaxZoomLevel(MAX_PRZYBLIZENIE);
        // po uruchomieniu aplikacji mapa ustawi kadr widoku na dane punkty
        mapa.addOnFirstLayoutListener((v, left, top, right, bottom) -> {
            BoundingBox obszarDoWyswietlenia = BoundingBox.fromGeoPoints(punkty);
            mapa.zoomToBoundingBox(obszarDoWyswietlenia, true, ROZMIAR_RAMKI);
            mapa.invalidate();
        });

        // -------------- ODSWIEZENIE MAPY --------------
        mapa.invalidate();
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    // metoda, która obliczy i wyświetli trasę wraz z punktami pogodowymi na mapie
    public void odswiezMape(Context kontekst) throws JSONException {
        // -------------- CZYSZCZENIE MAPY --------------
        // wywołanie metody czyszcząca mapę (punkty i trasa)
        wyczyscMape();

        // -------------- POBRANIE DANYCH TRASY --------------
        JSONObject trasaJSON = new JSONObject();
        OffsetDateTime czasDotarcia = OffsetDateTime.now();
        try {
            // sformatowanie koordynatów, aby pasowały do adresu zapytania API
            String koordynaty1 = szerGeog1 + "," + dlugGeog1;
            String koordynaty2 = szerGeog2 + "," + dlugGeog2;
            switch (srodek_transportu) {
                case "\uD83D\uDE97 samochód: najszybsza trasa":
                    transport_doURL = "fastest";
                    break;
                case "\uD83D\uDE97 samochód: najkrótsza trasa":
                    transport_doURL = "shortest";
                    break;
                case "\uD83D\uDEB2 rower":
                    transport_doURL = "bicycle";
                    break;
                case "\uD83D\uDEB6 pieszo":
                    transport_doURL = "pedestrian";
                    break;
            }

            // -------------- ZAPYTANIE O TRASĘ (mapquestapi.com) --------------
            // złączenie adresu url w jedną zmienną, która zawiera podstawową domenę zapytań API,
            // klucz, jednostki w kilometrach oraz koordynaty początkowe i końcowe trasy
            StringBuilder url = new StringBuilder("http://www.mapquestapi.com/directions/v2/optimizedroute?key=ElrQRaDB6PgzWPc9z2n3LXGuZ8KfjFfi&json={\"locations\":[\"" + koordynaty1 + "\",");
            int czasPostojuMinutySuma = 0;
            if (przystanki.size() > 0) {
                for (int numPrzystanku = 0; numPrzystanku < przystanki.size(); numPrzystanku++) {
                    PunkPostoju przystanek = przystanki.get(numPrzystanku);
                    czasPostojuMinutySuma += przystanek.getCzasPostojuMinuty();
                    url.append("\"").append(przystanek.getSzerGeog()).append(",").append(przystanek.getDlugGeog()).append("\",");
                }
            }
            url.append("\"").append(koordynaty2).append("\"], options:{routeType:").append(transport_doURL).append(",unit:k}}");
            Log.i(nazwaApki, "mapa url: " + url);
            // zapisanie wyniku zapytania do ciągu buforu
            StringBuffer odpowiedz = InterfejsAPI.pobierzOdpowiedzAPI(url.toString());

            //pobranie trasy z zapytania
            trasaJSON = (JSONObject) (new JSONObject(String.valueOf(odpowiedz))).get("route");

            //pobranie kodu błędu
            String kodBledu = ((JSONObject) trasaJSON.get("routeError")).getString("errorCode");
            // jeśli kodu błędu jest inny niż (-400) - nie znaleziono trasy -  wyświetl komunikat i przerwij metodę
            if (!kodBledu.equals("-400")) {
                Toast.makeText(kontekst, "Nie udało się znaleźć trasy!", Toast.LENGTH_LONG).show();
                Log.i(nazwaApk